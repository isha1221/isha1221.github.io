{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lang 27 Documentation Overview Lang 27 is a simple programming language designed for ease of use and readability. It supports basic syntax, data types, operators, control flow structures, functions, and built-in input/output functions. GitHub Repository: Lang 27 GitHub Repository Features and Examples 1. Basic Syntax Lang 27 allows variable declarations and function definitions using clear and structured syntax. Example: Variable Declarations Variables in Lang 27 are declared using the following format: ## Variable declarations num x = 10 str message = \"Hello, Lang 27!\" dec pi = 3.14 chr letter = 'A' bool isActive = true Function Definitions Functions are defined using the func keyword, followed by a name and parameters: 2. Data Types Lang 27 supports five primitive data types: - num - Integer values (e.g., 10 ) - str - String values (e.g., \"Hello\" ) - dec - Decimal values (e.g., 3.14 ) - chr - Character values (e.g., 'A' ) - bool - Boolean values ( true or false ) Example: num count = 10 str message = \"Hello, World!\" dec price = 19.99 chr grade = 'A' bool isActive = true 3. Operators Lang 27 supports the following operators: Arithmetic Operators: + , - , * , / Comparison Operators: == , != , > , < , >= , <= Assignment Operator: = Example: num a = 5 num b = 3 drucken(a + b) ## Output: 8 drucken(a > b) ## Output: true 4. Control Flow If-Else Statements num score = 85 if (score >= 50) { drucken(\"Pass\") } el { drucken(\"Fail\") } For Loop for (num i = 1; i <= 5; i = i + 1) { drucken(i) } 5. Built-in Functions Lang 27 provides useful built-in functions. drucken(value) : Prints the value to the console. eingabe(prompt, type) : Takes user input with type conversion. len(value) : Returns the length of a string. to_num(value) : Converts a string to a number. Example: drucken(\"Enter your name:\") str userName = eingabe(\"\", str) drucken(\"Hello, \" + userName) 6. Function Declaration Functions are defined using the func keyword. Example: func add(num a, num b) { return a + b } drucken(add(10, 20)) ## Output: 30 7. User Input Handling Lang 27 allows user input with type conversion. Example: num userAge = eingabe(\"Enter your age: \", num) drucken(\"Your age is: \" + userAge) 8. String Manipulation Example: str firstName = \"John\" str lastName = \"Doe\" drucken(\"Full name: \" + firstName + \" \" + lastName) drucken(\"Length of name: \" + len(firstName)) 9. Mathematical Operations Example: num x = 10 num y = 3 drucken(\"Sum: \" + (x + y)) drucken(\"Product: \" + (x * y)) 10. Type Conversion Example: str numStr = \"42\" num convertedNum = to_num(numStr) drucken(\"Converted number: \" + convertedNum) 11. Nested If Statements Example: num value = 10 if (value > 0) { if (value % 2 == 0) { drucken(\"Positive Even Number\") } el { drucken(\"Positive Odd Number\") } } el { drucken(\"Non-positive Number\") } 12. Function with Loops Example: func factorial(num n) { num result = 1 for (num i = 1; i <= n; i = i + 1) { result = result * i } return result } drucken(\"Factorial of 5: \" + factorial(5)) Contributing Contributions are welcome! Feel free to submit issues and pull requests via the GitHub Repository . License This project is open-source and available under the MIT License.","title":"Home"},{"location":"#lang-27-documentation","text":"","title":"Lang 27 Documentation"},{"location":"#overview","text":"Lang 27 is a simple programming language designed for ease of use and readability. It supports basic syntax, data types, operators, control flow structures, functions, and built-in input/output functions.","title":"Overview"},{"location":"#github-repository","text":"Lang 27 GitHub Repository","title":"GitHub Repository:"},{"location":"#features-and-examples","text":"","title":"Features and Examples"},{"location":"#1-basic-syntax","text":"Lang 27 allows variable declarations and function definitions using clear and structured syntax.","title":"1. Basic Syntax"},{"location":"#example","text":"","title":"Example:"},{"location":"#variable-declarations","text":"","title":"Variable Declarations"},{"location":"#variables-in-lang-27-are-declared-using-the-following-format","text":"## Variable declarations num x = 10 str message = \"Hello, Lang 27!\" dec pi = 3.14 chr letter = 'A' bool isActive = true","title":"Variables in Lang 27 are declared using the following format:"},{"location":"#function-definitions","text":"","title":"Function Definitions"},{"location":"#functions-are-defined-using-the-func-keyword-followed-by-a-name-and-parameters","text":"","title":"Functions are defined using the func keyword, followed by a name and parameters:"},{"location":"#2-data-types","text":"Lang 27 supports five primitive data types: - num - Integer values (e.g., 10 ) - str - String values (e.g., \"Hello\" ) - dec - Decimal values (e.g., 3.14 ) - chr - Character values (e.g., 'A' ) - bool - Boolean values ( true or false )","title":"2. Data Types"},{"location":"#example_1","text":"num count = 10 str message = \"Hello, World!\" dec price = 19.99 chr grade = 'A' bool isActive = true","title":"Example:"},{"location":"#3-operators","text":"Lang 27 supports the following operators:","title":"3. Operators"},{"location":"#arithmetic-operators-","text":"","title":"Arithmetic Operators: +, -, *, /"},{"location":"#comparison-operators","text":"","title":"Comparison Operators: ==, !=, &gt;, &lt;, &gt;=, &lt;="},{"location":"#assignment-operator","text":"","title":"Assignment Operator: ="},{"location":"#example_2","text":"num a = 5 num b = 3 drucken(a + b) ## Output: 8 drucken(a > b) ## Output: true","title":"Example:"},{"location":"#4-control-flow","text":"","title":"4. Control Flow"},{"location":"#if-else-statements","text":"num score = 85 if (score >= 50) { drucken(\"Pass\") } el { drucken(\"Fail\") }","title":"If-Else Statements"},{"location":"#for-loop","text":"for (num i = 1; i <= 5; i = i + 1) { drucken(i) }","title":"For Loop"},{"location":"#5-built-in-functions","text":"Lang 27 provides useful built-in functions. drucken(value) : Prints the value to the console. eingabe(prompt, type) : Takes user input with type conversion. len(value) : Returns the length of a string. to_num(value) : Converts a string to a number.","title":"5. Built-in Functions"},{"location":"#example_3","text":"drucken(\"Enter your name:\") str userName = eingabe(\"\", str) drucken(\"Hello, \" + userName)","title":"Example:"},{"location":"#6-function-declaration","text":"Functions are defined using the func keyword.","title":"6. Function Declaration"},{"location":"#example_4","text":"func add(num a, num b) { return a + b } drucken(add(10, 20)) ## Output: 30","title":"Example:"},{"location":"#7-user-input-handling","text":"Lang 27 allows user input with type conversion.","title":"7. User Input Handling"},{"location":"#example_5","text":"num userAge = eingabe(\"Enter your age: \", num) drucken(\"Your age is: \" + userAge)","title":"Example:"},{"location":"#8-string-manipulation","text":"","title":"8. String Manipulation"},{"location":"#example_6","text":"str firstName = \"John\" str lastName = \"Doe\" drucken(\"Full name: \" + firstName + \" \" + lastName) drucken(\"Length of name: \" + len(firstName))","title":"Example:"},{"location":"#9-mathematical-operations","text":"","title":"9. Mathematical Operations"},{"location":"#example_7","text":"num x = 10 num y = 3 drucken(\"Sum: \" + (x + y)) drucken(\"Product: \" + (x * y))","title":"Example:"},{"location":"#10-type-conversion","text":"","title":"10. Type Conversion"},{"location":"#example_8","text":"str numStr = \"42\" num convertedNum = to_num(numStr) drucken(\"Converted number: \" + convertedNum)","title":"Example:"},{"location":"#11-nested-if-statements","text":"","title":"11. Nested If Statements"},{"location":"#example_9","text":"num value = 10 if (value > 0) { if (value % 2 == 0) { drucken(\"Positive Even Number\") } el { drucken(\"Positive Odd Number\") } } el { drucken(\"Non-positive Number\") }","title":"Example:"},{"location":"#12-function-with-loops","text":"","title":"12. Function with Loops"},{"location":"#example_10","text":"func factorial(num n) { num result = 1 for (num i = 1; i <= n; i = i + 1) { result = result * i } return result } drucken(\"Factorial of 5: \" + factorial(5))","title":"Example:"},{"location":"#contributing","text":"Contributions are welcome! Feel free to submit issues and pull requests via the GitHub Repository .","title":"Contributing"},{"location":"#license","text":"This project is open-source and available under the MIT License.","title":"License"},{"location":"installation/","text":"Installation Guide for Lang 27 Windows Installation Download the latest release of Lang 27 from the GitHub Releases . Extract the downloaded archive to a desired location (e.g., C:\\Lang27 ). Add the extracted binary file's path to the system environment variable: Open Control Panel > System > Advanced system settings . Click on Environment Variables . Under System Variables , find and select Path , then click Edit . Click New , then enter the path to the Lang 27 binary (e.g., C:\\Lang27 ). Click OK to save the changes. Verify the installation by opening Command Prompt and running: sh lang27 --version If installed correctly, this should display the version of Lang 27. Linux Installation Download the latest release of Lang 27 from the GitHub Releases . Extract the downloaded archive to a desired location: sh tar -xvzf lang27-linux.tar.gz -C /opt/lang27 Add the binary path to your system's PATH variable: sh echo 'export PATH=\"/opt/lang27:$PATH\"' >> ~/.bashrc source ~/.bashrc Verify the installation by running: sh lang27 --version If installed correctly, this should display the version of Lang 27. Troubleshooting If lang27 is not recognized as a command, ensure that the path is correctly added to the system's environment variables. Try restarting your terminal or system after updating the PATH variable. If issues persist, check the GitHub Issues for troubleshooting help.","title":"Installation"},{"location":"installation/#installation-guide-for-lang-27","text":"","title":"Installation Guide for Lang 27"},{"location":"installation/#windows-installation","text":"Download the latest release of Lang 27 from the GitHub Releases . Extract the downloaded archive to a desired location (e.g., C:\\Lang27 ). Add the extracted binary file's path to the system environment variable: Open Control Panel > System > Advanced system settings . Click on Environment Variables . Under System Variables , find and select Path , then click Edit . Click New , then enter the path to the Lang 27 binary (e.g., C:\\Lang27 ). Click OK to save the changes. Verify the installation by opening Command Prompt and running: sh lang27 --version If installed correctly, this should display the version of Lang 27.","title":"Windows Installation"},{"location":"installation/#linux-installation","text":"Download the latest release of Lang 27 from the GitHub Releases . Extract the downloaded archive to a desired location: sh tar -xvzf lang27-linux.tar.gz -C /opt/lang27 Add the binary path to your system's PATH variable: sh echo 'export PATH=\"/opt/lang27:$PATH\"' >> ~/.bashrc source ~/.bashrc Verify the installation by running: sh lang27 --version If installed correctly, this should display the version of Lang 27.","title":"Linux Installation"},{"location":"installation/#troubleshooting","text":"If lang27 is not recognized as a command, ensure that the path is correctly added to the system's environment variables. Try restarting your terminal or system after updating the PATH variable. If issues persist, check the GitHub Issues for troubleshooting help.","title":"Troubleshooting"},{"location":"usage/","text":"Usage Guide for Lang 27 Running a Lang 27 Script To execute a Lang 27 script, follow these steps: Windows Open Command Prompt . Navigate to the directory containing your script: cd path\\to\\your\\script Run the script using: lang27 script.lip Linux Open Terminal . Navigate to the directory containing your script: cd /path/to/your/script Run the script using: lang27 script.lip Example Script Create a file named example.lip with the following content: num x = 10 num y = 20 drucken(\"Sum:\") drucken(x + y) Run the script as described above to see the output. Debugging Mode To run a script with debugging enabled, use: lang27 --debug=true script.lip This will print additional details to help diagnose errors. Checking Installed Version To check your installed version of Lang 27, run: lang27 --version","title":"Usage"},{"location":"usage/#usage-guide-for-lang-27","text":"","title":"Usage Guide for Lang 27"},{"location":"usage/#running-a-lang-27-script","text":"To execute a Lang 27 script, follow these steps:","title":"Running a Lang 27 Script"},{"location":"usage/#windows","text":"Open Command Prompt . Navigate to the directory containing your script: cd path\\to\\your\\script Run the script using: lang27 script.lip","title":"Windows"},{"location":"usage/#linux","text":"Open Terminal . Navigate to the directory containing your script: cd /path/to/your/script Run the script using: lang27 script.lip","title":"Linux"},{"location":"usage/#example-script","text":"Create a file named example.lip with the following content: num x = 10 num y = 20 drucken(\"Sum:\") drucken(x + y) Run the script as described above to see the output.","title":"Example Script"},{"location":"usage/#debugging-mode","text":"To run a script with debugging enabled, use: lang27 --debug=true script.lip This will print additional details to help diagnose errors.","title":"Debugging Mode"},{"location":"usage/#checking-installed-version","text":"To check your installed version of Lang 27, run: lang27 --version","title":"Checking Installed Version"}]}